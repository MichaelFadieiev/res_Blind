switch (skl) {
    case lvl_skl_master
}

if (skl >= lvl_skl_master_value) {System.out.println(lvl_skl_master_name}
else if (skl >= lvl_skl_professional_value) {System.out.println(lvl_skl_professional_name}
else if (skl >= lvl_skl_skillful_value) {System.out.println(lvl_skl_skillful_name}
else if (skl >= lvl_skl_amator_value) {System.out.println(lvl_skl_amator_name}
else if (skl >= lvl_skl_newby_value) {System.out.println(lvl_skl_newby_name};
------------------------------------------------
import java.util.ArrayList;
import java.util.Random;

public class Catalogue
{
    private Random randomGenerator;
    private ArrayList<Item> catalogue;

    public Catalogue()
    { 
        catalogue = new ArrayList<Item>();
        randomGenerator = new Random();
    }

    public Item anyItem()
    {
        int index = randomGenerator.nextInt(catalogue.size());
        Item item = catalogue.get(index);
        System.out.println("Managers choice this week" + item + "our recommendation to you");
        return item;
    }
}
---------------------------------------------

ArrayList<ItemType> inventory = new ArrayList(0);
inventory.add(ItemType);

boolean inventory.add(apple);
inventory.clear();
boolean inventory.contains(rock);
boolean inventory.isEmpty();
boolean inventory.remove(sword);
ItemType inventory.remove(1);
inventory.removeAll(collection<>);
ItemType inventory.set(1, stick);
int inventory.size();
ItemType[] inventory.toArray();

HashMap<String, ItemType> onProtagonist = new HashMap(8, 1.0);
onProtagonist.set("r_hnd", NULL);
onProtagonist.set("l_hnd", NULL);
onProtagonist.set("head", NULL);
onProtagonist.set("body", NULL);
onProtagonist.set("legs", NULL);
onProtagonist.set("hands", NULL);
onProtagonist.set("feets", NULL);

onProtagonist.clear();
onProtagonist.replace("l_hnd", shield);
onProtagonist.get("r_hnd");
onProtagonist.keySet();
boolean onProtagonist.containsValue(shield);
boolean onProtagonist.containsKey("head");
onProtagonist.isEmpty();
onProtagonist.put("r_hnd", apple);
onProtagonist.putAll(onProtagonist2)
Collection<ItemType> onProtagonist.values();
--------------------------------------------------------
class ItemType {
    public ArrayList<int> lifeLeft; //in minutes, for coins should not be recalculated!!!
    public String name, 
                  id,  //id not unique!
                  description;
    HashMap<String, Short> tags; /*code of item type from resources.string(tag_keys)*/
                        
    public int weight, //weight of item
               size, //volume of item
               cost, //basic value
               quantity, //size of stack
               hidden; //how much time is needed to discover it, basic value
    public float[6] atackRate; //basic value of damage {prc, slh, hck, blt, sht, trw} -> {P, S, H, B, A, T}
    public int timeConst;
    
}
--------------------------------------------------
class TerritoryType {
    public int xAxis, yAxis, sizeFreeFarm, sizeFreeBuild, sizeOverall;
    public HashMap<byte, int>
    public String id, type, name, description;
    public HashMap<String, Integer> places, resourcesHidd, resourcesExpl, itemsHidd, itemsExpl; //with size
    public boolean active; //is the protagonist in it
    
    public void TerritoryType(String p_type, int p_x, int p_y, int p_size){
    	xAxis = p_x;
	yAxis = p_y;
	sizeOverall = p_size;
	type = p_type;
	//places with random from res.territory
	//resourcesHidd with random from res.territory
	//itemsHidd with random from res.territory
	//resourcesHidd with random from res.territory
	
	}
    public void activate() {
    	active = true;
	//get name, type, description, sizeFreeFarm, sizeFreeBuild, sizeOverall
    }
    
    public void deactivate() {
    	active = false;
	//save to drive name, type, description, sizeFreeFarm, sizeFreeBuild, sizeOverall
    }
    
    public void spawn(PersonType p_person) {
    	
    }
    
		      
}
--------------------------------------------------
public void spawn(String p_name, 
    		      String p_surname,
		      int p_age,
		      HashMap<char, int> p_stats, 
		      HashMap<String, int> p_skills,
		      ArrayList<ItemType> p_inventory) {
	name = p_name;
	surname = p_surname;
	age = p_age;
	
    }
--------------------------------------------------
class PlaceType {
    public int 
    public String type, name, description;
    public HashMap<String, Integer> resourcesHidd, resourcesExpl, items;
}
---------------------------------------------------------
<string name="inv_txt">Инвентарь</string>
<string name="jrn_txt">Журнал</string>
<string name="mmr_txt">Память</string>
<string name="map_txt">Карта</string>  or <string name="pls_txt">Места</string>
<string name="prt_txt">Персонаж</string>
<string name="rll_txt">Свернуть</string>

<string name="lvl_skl_name_1">Новичёк</string>
<string name="lvl_skl_name_2">Любитель</string>
<string name="lvl_skl_name_3">Опытный</string>
<string name="lvl_skl_name_4">Професcионал</string>
<string name="lvl_skl_name_5">Мастер</string>

<integer name="lvl_skl_value_1">5</integer>
<integer name="lvl_skl_value_2">20</integer>
<integer name="lvl_skl_value_3">40</integer>
<integer name="lvl_skl_value_4">70</integer>
<integer name="lvl_skl_value_5">90</integer>
    
----------------------------------------------
<string-array name="skl_keys">
	<item>skl_wpn_blt</item>
	<item>skl_wpn_slh</item>
	<item>skl_wpn_prc</item>
	<item>skl_wpn_hck</item>
	<item>skl_wpn_sht</item>
	<item>skl_wpn_trw</item>
	<item>skl_brh</item>
	<item>skl_hnt</item>
	<item>skl_ptf</item>
	<item>skl_mtl</item>
	<item>skl_wdc</item>
	<item>skl_stn</item>
	<item>skl_ktl</item>
	<item>skl_agr</item>
	<item>skl_mnr</item>
	<item>skl_bld</item>
	<item>skl_trd</item>
	<item>skl_spc</item>
	<item>skl_thv</item>
	<item>skl_srv</item>
	<item>skl_swm</item>
	<item>skl_mdc</item>
</string-array>

<!--Skill names-->
<string name="skl_wpn_blt">Владение тупым оружием</string>
<string name="skl_wpn_slh">Владение режущим оружием</string>
<string name="skl_wpn_prc">Владение колющим оружием</string>
<string name="skl_wpn_hck">Владение рубящим оружием</string>
<string name="skl_wpn_sht">Стрельба</string>
<string name="skl_wpn_trw">Метание</string>
<string name="skl_brh">Рукопашный бой</string>
<string name="skl_hnt">Охота</string>
<string name="skl_ptf">Следопыт</string>
<string name="skl_mtl">Металлообработка</string>
<string name="skl_wdc">Деревообработка</string>
<string name="skl_stn">Камнеобработка</string>
<string name="skl_ktl">Скотоводство</string>
<string name="skl_agr">Земледелие</string>
<string name="skl_mnr">Шахтерское ремесло</string>
<string name="skl_bld">Строительство</string>
<string name="skl_trd">Торговля</string>
<string name="skl_spc">Общение</string>
<string name="skl_thv">Воровство</string>
<string name="skl_srv">Выживание</string>
<string name="skl_swm">Плавание</string>
<string name="skl_mdc">Медицина</string>
    
<string-array name="tag_keys">
	<item>wh</item><!--wearable on head, armor points-->
	<item>wb</item><!--wearable on body, armor points-->
	<item>wa</item><!--wearable on hands, armor points-->
	<item>wl</item><!--wearable on legs, armor points-->
	<item>wf</item><!--wearable on feets, armor points-->
	<item>cw</item><!--concumable water, restore thirst-->
	<item>cf</item><!--concumable food, restore hanger-->
	<item>ca</item><!--concumable alcohol, restore ???-->
	<item>o</item><!--ore, time for smellting-->
	<item>f</item><!--fillable, volume-->
	<item>c</item><!--container, volume-->
	<item>a</item><!--ammo, with type of projectile device {1-bow, 2-crossbow, 3-sling, 4-9mm, 5-5.45mm, 6-7.62mm}-->
</string-array>    
------------------------------------------------------
Byte.toString(stt_key)
String.valueOf(stt_key)

boolean endsWith(String suffix)
filename.toString().substring(0, filename.getString().lastIndexOf("."));
-------------------------------------------------------
//deprecated
public String namePadej (String p_string, char p_gender, char p_padej) {
	switch (p_padej) {
		case 'i': return p_string;
		case 'r': if (endsWith("ев") || endsWith("ов") || endsWith("ин") || endsWith("ан")) {return (p_string + "а");}
		case 'd':
		case 'v':
		case 't':
		case 'p':
}
/* i imenitelnyi
   r roditelnyi
   d datelnyi
   v velitelnyi
   t tvoritelnyi
   p predlojnyi
   */

public String surnameFM (String p_string) {
	if (endsWith("ев") || endsWith("ов") || endsWith("ин")) {return (p_string + "а");}
	else if (endsWith("ий") || endsWith("ый")) {return (p_string.substring(0, p_string.length()-3) + "ая");}
	else {return p_string;}
}

queue time stack
after every protagonist action (TIC): 
first - calculates the result of previously planned actions of NPC
second - added new planned actions in the stack after first phase.
------------------------------------------------------
public boolean checkName (String p_name) {
	p_name = p_name.trim();
	if (p_name.matches("[^ a-zA-Zа-яА-Я\'\"]") || p_name.isEmpty()) {return false;}
	else {return true;} 
	
}
------------------------------------------------------
TextView tvCatsInfo = (TextView)findViewById(R.id.textView1);
tvCatsInfo.setText(R.string.aboutcat);

<string name="aboutcat">У кота по имени %1$s %2$s лапы, %3$s хвост. Ему %4$d лет</string>

String strBarsik = "Барсик";
String strPaws = "четыре";
String strTail = "один";
int year = 5;  
String strCats = getResources().getString(R.string.aboutcat);  
String strFinal = String.format(strCats, strBarsik, strPaws, strTail, year);  
tvCatsInfo.setText(strFinal);
String strVaska = "Васька";
year = 6;
String strFinal = String.format(strCats, strVaska, strPaws, strTail, year);  
tvCatsInfo.setText(strFinal);

--------------------------------------------------
add variable String status into PersonType class
	ArrayList<byte> modes;
	byte nature;
	int karma;//steal '-0.05*cost_of_items', kill_(wo)man '30*(karma_victim-30)', start_atack '
	
	
	
---------------------------------------------------
global constant/values:

hero_krm_brd		100
good_krm_brd		50
outlaw_krm_brd		-20
evilLord_krm_brd	-80

kill_krm_mod
steal_krm_mod
startFight_krm_mod
help0_krm_mod
help1_krm_mod
help2_krm_mod
help3_krm_mod
help4_krm_mod

age_groups [5, 15, 50]
age_limits [60, 100]

int strt_attrP = 15;
int strt_sklProff = 40;
int strt_sklHobby = 20;
int strt_sklInter = 10;
int stat_max 10
int stat_lim 12
int skill_lim 100
int[] skill_groups [5, 20, 40, 65, 85]	Новичок, Любитель, Опытный, Професcионал, Мастер
int[] tree_age_groups [1, 10, 30, 100]	Саженец, Деревце, Дерево, Большое дерево, Огромное дерево

int max_hp 	1000	очки жизни
int max_stm 	1000	очки выносливости
int max_exh	1000	очки усталости
int max_hng	1000	очки голода
int max_thr	1000	очки жажды

range_hp	[0, 100, 300, 600, 900, 1000]	Вы умерли, Критическое состояние (без медицинской помощи вы погибнете), Вы серьезно ранены, Вы ранены, Вы здоровы, max
rng_stm		[0, 200, 1000]	Вы не можете пошевелиться из-за усталости, Вы еле передвигаетесь от усталости, Вы устали, Вы полны сил, max
rng_exh		[0, 300, 1000]	Вы потеряли сознание от измождения, Вы хотите спать, Вы бодры, max
rng_hng		[0, 300, 700, 1000]	Вы умерли от голода, Вы изнемогаете от голода, Вы голодны, Вы сыты, max
rng_thr		[0, 300, 700, 1000]	Вы умерли от жажды, Вы обезвожены, Вы хотите пить, Вы не хотите пить, max

//rng_year	[300, 450] days //not used!
rng_month	[10, 14] months
rng_day		[1200, 1920] min // deprecated
rng_dayTime	[5, 6, 9, 18, 20, 22] hr	Ночь, Рассвет, Утро, День, Темнеет, Вечер
rng_dayTime	[20, 25, 38, 75, 83, 92] %

1 ед площади территории = 10 м2
1 ед объёма локации = 1 м3
1 ед объёма инвентаря = 1 см3
1 ед веса = 1 г
1 ед игрового времени = 1 минута
1 ед валюты = 1 медная монета
100 медных монет = 1 серебрянная монета
12 серебрянных монет = 1 золотая монета

startYear = 
startMonth = 
startDay = 
startHour = 00
startMinute = 00
---------------------------------------
rng_time {months_min_year, months_rng_year, 
	days_min_month, days_rng_month, 
	hours_min_day, hours_rng_day}
----
import java.util.Random;

int[] rng_time = {10, 14, 28, 32, 20, 32};
int[] timeConst = new int[3]; //месяцев в году, часов в дне, минут в часе {12, 24, 60}
int[] dayMonth; //дней в месяцах {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}

private Random randomGenerator;

randomGenerator = new Random();

timeConst[0] = rng_time[0] + randomGenerator.nextInt(rng_time[1]);
dayMonth = new int[timeConst[0]];
for (int i=0; i<timeConst[0]; i++) {dayMonth[i] = rng_time[2] + randomGenerator.nextInt(rng_time[3]);}
//for (int i=0; i<timeConst.lenght-1; i++) {timeConst[i] = rng_time[2*i] + randomGenerator.nextInt(rng_time[(2*i)+1]);} --для одинаковых месяцев!!!
timeConst[1] = rng_time[4] + randomGenerator.nextInt(rng_time[5]);
timeConst[2] = 60;

Time
int[] dateTime = {1193, 4, 5, 0, 0};//startYear, startMonth, startDay, startHour, startMinute (учесть счет с нуля для месяца и дня!!!)

private int[] flowTime (int[] p_dateTime, int p_minutsDuration) {
	int v_min, v_hrs, v_dys, v_mth, v_yrs;
	int[] v_DT = p_dateTime;
	v_min = v_DT[4] + p_minutsDuration
	v_hrs = v_min / timeConst[2];
	v_DT[4] = v_min % timeConst[2];
	if (v_hrs > 0) {
		v_hrs = v_DT[3] + v_hrs;
		v_dys = v_hrs / timeConst[1];
		v_DT[3] = v_hrs % timeConst[1];
		if (v_dys > 0) {
			v_dys += v_DT[2];
			while (v_dys > dayMonth[v_DT[1]]) { //условие инкремента месяца
				v_dys -= dayMonth[v_DT[1]];
				v_DT[1] ++;	//инкремент месяца
				if (v_DT[1] > timeConst[0]) { //инкремент года
					v_DT[0]++;
					v_DT[1] = 1;
				}
			}
			v_DT[2] = v_dys;
		}
	}
	return v_DT;
}
